import { MpPlatform, MpViewInitLifes, MpViewMountLifes, MkMaybe, MpViewType, MpView } from "@mpkit/types";
export declare const uuid: () => string;
export declare const isNativeFunc: (func: Function) => boolean;
export declare const isFunc: (obj: any) => boolean;
export declare const isPromise: (obj: any) => any;
export declare const getMpPlatform: () => MpPlatform;
export declare const getApiVar: () => import("@mpkit/types").MpApiVar;
export declare const getMpInitLifeName: (viewType: MpViewType) => MpViewInitLifes;
export declare const getMpMountLifeName: (viewType: MpViewType) => MpViewMountLifes;
export declare const initView: (view: MpView, viewType: MpViewType) => void;
export declare const getMpViewType: (view: MpView) => MkMaybe<MpViewType>;
export declare const getMpNativeViewId: (vm: MpView, viewType?: MpViewType) => MkMaybe<string>;
export declare const getMpComponentPageNativeViewId: (vm: MpView) => MkMaybe<string>;
export declare const getMpViewPathName: (viewType: MpViewType, vm?: MpView) => string;
export declare const isMpIvew: (view: any) => boolean;
export declare const clone: (obj: any) => any;
export declare function isPlainObject(value: any): boolean;
export declare const isEmptyObject: (obj: any) => boolean;
export declare const isUndefined: (obj: any) => boolean;
export declare const merge: (source: any, ...targets: any[]) => any;
export declare const isValidObject: (obj: any, checkEmpty?: boolean) => boolean;
export declare const nextCharCount: (char: string, charIndex: number, str: string) => number;
export declare const firstAfterCharsIndex: (afterIndex: number, chars: string, str: string) => number;
export declare const reolaceFileSuffix: (fileName: string, suffix: string) => string;
export declare const likeArray: (obj: any) => any;
export declare const isValidMpPlatform: (platform: any) => boolean;
