import { MpPlatform } from "./platform";
import { MkOmit, MkRequireAll } from "./util";
export declare type MkMpSDKVersion<N extends number = number, S extends string = `${N}.${N}.${N}`> = S;
export interface LikeMkMpSDKVersionSupport {
    supportVersion?: MkMpSDKVersion;
}
export interface MkMpSDKVersionSupport extends MkRequireAll<LikeMkMpSDKVersionSupport> {
}
export interface LikeMkMpXmlDataBinding {
    leftBoundaryChar?: string;
    rightBoundaryChar?: string;
    leftBoundarySpace?: number;
    rightBoundarySpace?: number;
}
export interface MkMpXmlDataBinding extends MkRequireAll<LikeMkMpXmlDataBinding> {
}
export interface MkMpXmlSupportDataBinding {
    dataBinding?: MkMpXmlDataBinding;
    dataBindingCount?: number;
}
export declare const enum MkMpXmlAstContentType {
    static = "static",
    dataBinding = "dataBinding"
}
export interface MkMpXmlAstContent {
    type: MkMpXmlAstContentType;
    value: string;
}
export interface MkMpXmlAstNode {
    name: string;
    content?: string;
    mpContents?: MkMpXmlAstContent[];
}
export interface MkMpXmlAstAttr extends MkMpXmlAstNode {
}
export interface MkMpXmlAstElement extends MkMpXmlAstNode {
    attrs?: MkMpXmlAstAttr[];
    children?: MkMpXmlAstElement[];
    previousSibling?: MkMpXmlAstElement;
    nextSibling?: MkMpXmlAstElement;
}
export interface MkMpXmlAstPreviousSiblingFinder {
    (node: MkMpXmlAstElement, siblings: MkMpXmlAstElement[]): MkMpXmlAstElement;
}
export interface MkMpXmlNodeValidater {
    (attr: MkMpXmlAstAttr, // 属性ast对象
    parent: MkMpXmlAstElement, // 属性的父节点ast对象
    grandpa?: MkMpXmlAstElement, // 属性的爷爷节点ast对象
    previousSiblingFinder?: MkMpXmlAstPreviousSiblingFinder): boolean | MkMpXmlNodeValidateResult;
}
export declare const enum MkMpXmlNodeValidateResultLevel {
    success = "success",
    fail = "fail",
    warn = "warn",
    ignore = "ignore"
}
export interface MkMpXmlNodeValidateResult {
    pass: boolean;
    level: MkMpXmlNodeValidateResultLevel;
    code: string;
    message: string;
}
export declare enum MkMpXmlAttrContentType {
    string = "string",
    boolean = "boolean",
    number = "number"
}
export interface LikeMkMpXmlAttrSpec extends MkMpXmlSupportDataBinding, LikeMkMpSDKVersionSupport {
    requireContent?: number;
    require?: number;
    isEvent?: boolean;
    contentType?: MkMpXmlAttrContentType | MkMpXmlAttrContentType[];
    defaultContent?: any;
    validater?: MkMpXmlNodeValidater;
}
export interface MkMpXmlAttrSpec extends MkOmit<MkRequireAll<LikeMkMpXmlAttrSpec>, "defaultContent" | "validater"> {
    defaultContent?: any;
    validater?: MkMpXmlNodeValidater;
}
export interface MkMpXmlNodeSpecMap<T> {
    _common?: T;
    _unclaimed?: T;
    [p: string]: T;
}
export interface LikeMkMpXmlElementSpec extends MkMpXmlSupportDataBinding, LikeMkMpSDKVersionSupport {
    closeType?: number;
    attrsSpec?: MkMpXmlNodeSpecMap<LikeMkMpXmlAttrSpec>;
}
export interface MkMpXmlElementSpec extends MkOmit<MkRequireAll<LikeMkMpXmlElementSpec>, "attrsSpec">, MkMpSDKVersionSupport {
    attrsSpec: MkMpXmlNodeSpecMap<MkMpXmlAttrSpec>;
}
export interface MkMpXmlElement {
    id?: string;
    dataset?: {
        [p: string]: any;
    };
}
export interface MkMpXmlBaseEvent<T = undefined> {
    type: string;
    timeStamp: number;
    target: MkMpXmlElement;
    currentTarget: MkMpXmlElement;
    detail?: T;
}
export interface MkMpXmlEventHandler<D = undefined, T = MkMpXmlBaseEvent<D>> {
    (event: T): any;
}
export interface LikeMkMpXmlSpec extends MkMpXmlNodeSpecMap<LikeMkMpXmlElementSpec> {
}
export interface MkMpXmlSpec extends MkMpXmlNodeSpecMap<MkMpXmlElementSpec> {
}
export interface MkMpPlatformSpec<T> {
    [MpPlatform.wechat]: T;
    [MpPlatform.alipay]: T;
    [MpPlatform.smart]: T;
    [MpPlatform.tiktok]: T;
}
